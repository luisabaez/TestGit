/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package abilabpsync;

import java.awt.Cursor;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import javax.xml.parsers.ParserConfigurationException;
import mssqlconn.DatabasePropertiesjFrame;
import org.xml.sax.SAXException;
import org.jasypt.encryption.pbe.StandardPBEStringEncryptor;
import org.jasypt.properties.EncryptableProperties;

/**
 *
 * @author LuisA
 */
public class MainFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form MacnFrame
     */
    public static ArrayList<Customer> bpCustomers = new ArrayList<Customer>();
    public static ArrayList<Customer> abilaCutomers = new ArrayList<Customer>();
    public static ArrayList<Customer> customersToAdd = new ArrayList<Customer>();
    public static ArrayList<Customer> customersToUpdate = new ArrayList<Customer>();
    public static ArrayList<Invoice> abilaInvoices = new ArrayList<Invoice>();
    public static ArrayList<Invoice> bpInvoices = new ArrayList<Invoice>();
    public static ArrayList<Invoice> invoicesToAdd = new ArrayList<Invoice>();
    public static ArrayList<Invoice> invoicesToUpdate = new ArrayList<Invoice>();
    public static ArrayList<Payment> bpPayments = new ArrayList<Payment>();
    public static ArrayList<Payment> returnedPayments = new ArrayList<Payment>();
    public static ArrayList<Payment> abilaPayments = new ArrayList<Payment>();
    public static ArrayList<Payment> paymentsToAddToAbila = new ArrayList<Payment>();
    public static ArrayList<Payment> paymentsToAddToBillandPay = new ArrayList<Payment>();
    String DATABASE_URL = null;
    String SERVER_NAME = null;
    String DATABASE_NAME = null;
    String USER_NAME = null;
    String PASSWORD = null;
    public static String billerID = null;
    public static String billerPassword = null;
    public static String lastUpdate = null;
    public static String lastBPPaymentRetrieveDate = null;
    String ARCSessionID = null;
    PerformPostCall pc = new PerformPostCall();
    PerformPostCallGetInvoices pci = new PerformPostCallGetInvoices();
    PerformPostCallAddInvoice pcai = new PerformPostCallAddInvoice();
    PerformPostCallUpdateInvoice pcui = new PerformPostCallUpdateInvoice();
    PerformPostCallCustomerAdd pca = new PerformPostCallCustomerAdd();
    PerformPostCallUpdateCustomer pcuc = new PerformPostCallUpdateCustomer();
    PerformPostCallGetPayments pcp = new PerformPostCallGetPayments();
    DatabasePropertiesjFrame jframeDatabase = new DatabasePropertiesjFrame();
    PerformPostCallGetInvoiceRefNo pcgrf = new PerformPostCallGetInvoiceRefNo();
    BackgroundSync invoiceSync;
    public static boolean SyncBal;
    public static ArrayList<AccountSegment> accountSegments = new ArrayList<AccountSegment>();
    public static ArrayList<AccountCodeAssignments> requiredGLAssigments = new ArrayList<AccountCodeAssignments>();
    public static String glSegment = null;
    public static String fundSegment = null;
    public static int glSegmentIndex = 99;
    public static int fundSegmentIndex = 99;
    public static String customerToSync = "";
    
    
    
    //public static JTextArea progressMonitor2;
    
    public MainFrame() throws IOException, SAXException, ParserConfigurationException{
        //System.setProperty("javax.net.ssl.trustStore","clientTrustStore.key");

        //System.setProperty("javax.net.ssl.trustStorePassword","qwerty");
        initComponents();
        
        //customerToSync = customerToSyncText.getText();
                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        progressMonitor = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        syncProgressBar = new javax.swing.JProgressBar();
        syncCancel = new javax.swing.JButton();
        syncAll = new javax.swing.JButton();
        sendEmails = new javax.swing.JCheckBox();
        progressBarLabels = new javax.swing.JLabel();
        customerToSyncText = new javax.swing.JTextField();
        customerToSyncLabel = new javax.swing.JLabel();
        mainFrameMenuBar = new javax.swing.JMenuBar();
        configureMenu = new javax.swing.JMenu();
        configureSQLMenuItem = new javax.swing.JMenuItem();
        logsMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BPSync");
        setResizable(false);

        progressMonitor.setColumns(20);
        progressMonitor.setRows(5);
        jScrollPane1.setViewportView(progressMonitor);

        jLabel1.setText("Progress Monitor");

        syncProgressBar.setStringPainted(true);

        syncCancel.setText("Cancel");
        syncCancel.setEnabled(false);
        syncCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncCancelActionPerformed(evt);
            }
        });

        syncAll.setText("Sync All");
        syncAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncAllActionPerformed(evt);
            }
        });

        sendEmails.setText("Send Emails");
        sendEmails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendEmailsActionPerformed(evt);
            }
        });

        customerToSyncText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerToSyncTextActionPerformed(evt);
            }
        });

        customerToSyncLabel.setText("Customer to Sync:");

        configureMenu.setText("Configuration");

        configureSQLMenuItem.setText("Configure");
        configureSQLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configureSQLMenuItemActionPerformed(evt);
            }
        });
        configureMenu.add(configureSQLMenuItem);

        mainFrameMenuBar.add(configureMenu);

        logsMenu.setText("Logs");
        mainFrameMenuBar.add(logsMenu);

        setJMenuBar(mainFrameMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(syncCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(syncAll, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sendEmails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(progressBarLabels, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(syncProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 71, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customerToSyncLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerToSyncText, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendEmails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(syncAll)
                        .addGap(18, 18, 18)
                        .addComponent(syncCancel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBarLabels, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(syncProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerToSyncText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerToSyncLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void configureSQLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configureSQLMenuItemActionPerformed
        getSQLProperties();
        //DatabasePropertiesjFrame jframeDatabase = new DatabasePropertiesjFrame();
        jframeDatabase.setDefaultCloseOperation(jframeDatabase.DO_NOTHING_ON_CLOSE);

        //Set label text for current properties values
        jframeDatabase.setCurrentSQLServerName(SERVER_NAME);
        jframeDatabase.setCurrentSQLDatabase(DATABASE_NAME);
        jframeDatabase.setCurrentSQLUserName(USER_NAME);
        jframeDatabase.setCurrentBillerId(billerID);
        jframeDatabase.setCurrentLastUpdate(lastUpdate);
        jframeDatabase.addWindowListener(new WindowAdapter(){
            
        public void windowClosing(WindowEvent e){
        
        ActionListener task = new ActionListener(){
            boolean alreadyDisposed = false;
            public void actionPerformed(ActionEvent e){
                if(jframeDatabase.isDisplayable()){
                    alreadyDisposed = true;
                    System.out.println("test");
                    jframeDatabase.dispose();
                }
            }
        };
        Timer timer = new Timer(500, task); //fire every half second
        timer.setInitialDelay(500);        //first delay 2 seconds
        timer.setRepeats(false);
        timer.start();
        System.out.println("test1");
        jframeDatabase.saveListValues();
        
    }
            
        });
        jframeDatabase.setVisible(true);

    }//GEN-LAST:event_configureSQLMenuItemActionPerformed

    
    
    private void syncCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncCancelActionPerformed
        invoiceSync.cancel(true);
        syncAll.setEnabled(true);
        syncCancel.setEnabled(false);      
    }//GEN-LAST:event_syncCancelActionPerformed
        
    private void syncAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncAllActionPerformed
        getSQLProperties();
        
        customerToSync = customerToSyncText.getText();
        
        progressBarLabels.setText("");

        //jFrameFirst.
        syncProgressBar.setValue(0);
        progressMonitor.setText("");
        
        //Clear Arrays
        bpCustomers.clear();
        abilaCutomers.clear();
        customersToAdd.clear();
        customersToUpdate.clear();
        abilaInvoices.clear();
        bpInvoices.clear();
        invoicesToAdd.clear();
        invoicesToUpdate.clear();
        bpPayments.clear();
        returnedPayments.clear();
        abilaPayments.clear();
        paymentsToAddToAbila.clear();
        paymentsToAddToBillandPay.clear();
        
        if(lastUpdate.isEmpty()){
            sendEmails.setSelected(false);
            Object[] options = {"Sync All","Sync Open Transaction","Cancel"};
            int n = JOptionPane.showOptionDialog(this, "This is the first time Abila is synchronzed with Bill and Pay. \n"
                    + "What would you like to do? ","First Sync",JOptionPane.YES_NO_CANCEL_OPTION,
                    JOptionPane.QUESTION_MESSAGE,null,options,options[2]);
            if (n == JOptionPane.YES_OPTION) {
               invoiceSync = new BackgroundSync(progressMonitor, syncAll, syncCancel, sendEmails.isSelected(), true);
            } else if (n == JOptionPane.NO_OPTION) {
               // setLabel("OK, just the ham, then.");
                invoiceSync = new BackgroundSync(progressMonitor, syncAll, syncCancel, sendEmails.isSelected(), true);
            } else if (n == JOptionPane.CANCEL_OPTION) {
               // setLabel("Well, I'm certainly not going to eat them!");
               sendEmails.setSelected(true);
            } else {
                JOptionPane.showMessageDialog(this, "You have close the window");
            }            

        } else {
            invoiceSync = new BackgroundSync(progressMonitor, syncAll, syncCancel, sendEmails.isSelected(), false);
        }
        
        //invoiceSync = new BackgroundSync(progressMonitor, syncAll, syncCancel, sendEmails.isSelected(), false); //SyncBalOnly.isSelected()
        
        invoiceSync.addPropertyChangeListener(
                new PropertyChangeListener()
                {
                    public void propertyChange(PropertyChangeEvent e)
                    {
                        if(e.getPropertyName().equals("progress"))
                        {
                            int newValue = (Integer) e.getNewValue();
                            syncProgressBar.setValue(newValue);
                        }
                    }
                }
                
        );
        
        
        
        syncAll.setActionCommand("SyncAll");
        syncAll.addActionListener(this);
        syncAll.setEnabled(false);
        syncCancel.setActionCommand("Cancel");
        syncCancel.addActionListener(this);
        syncCancel.setEnabled(true);
        
        
        invoiceSync.execute();
        
    }//GEN-LAST:event_syncAllActionPerformed
    
    private void getSQLProperties(){
        
        StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor();
        encryptor.setPassword("elitebco100910");
        try {
            File file = new File("appproperties.properties");
            FileInputStream fileInput = new FileInputStream(file);
            //Properties properties = new Properties();
            Properties properties = new EncryptableProperties(encryptor);
            properties.load(fileInput);
            fileInput.close();
            PASSWORD = properties.getProperty("Password");
            DATABASE_NAME = properties.getProperty("DatabaseName");
            USER_NAME = properties.getProperty("UserName");
            if(PASSWORD.isEmpty() || USER_NAME.isEmpty()){
                PASSWORD = "BlackBird";
                USER_NAME = "NpsAdmin";
            }
            SERVER_NAME = properties.getProperty("SQLServer");
            DATABASE_URL = "jdbc:jtds:sqlserver://" + properties.getProperty("SQLServer") + ";instance=" + properties.getProperty("Instance") + ";databaseName=" + properties.getProperty("DatabaseName");
            //USER_NAME = encryptor.decrypt(properties.getProperty("UserName"));
            
            billerID = properties.getProperty("BillerID");
            billerPassword = properties.getProperty("BillerPassword");
            lastUpdate = properties.getProperty("LastUpdate");
            lastBPPaymentRetrieveDate = properties.getProperty("Last BP Payments Retrieve Date");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public String getCustomerToSync(){
        return customerToSyncText.getText();
    }

    private void sendEmailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEmailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sendEmailsActionPerformed

    private void customerToSyncTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerToSyncTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerToSyncTextActionPerformed
     
//    public void setSyncBal(boolean syncBal){
//        SyncBal=syncBal;
//    }
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SAXException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ParserConfigurationException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu configureMenu;
    private javax.swing.JMenuItem configureSQLMenuItem;
    private javax.swing.JLabel customerToSyncLabel;
    private javax.swing.JTextField customerToSyncText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu logsMenu;
    private javax.swing.JMenuBar mainFrameMenuBar;
    public static javax.swing.JLabel progressBarLabels;
    public static javax.swing.JTextArea progressMonitor;
    private javax.swing.JCheckBox sendEmails;
    private javax.swing.JButton syncAll;
    private javax.swing.JButton syncCancel;
    private javax.swing.JProgressBar syncProgressBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent ae) {
        
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if("Cancel".equals(ae.getActionCommand())){
            //invoiceSync.cancel(true);
           // progressMonitor.append("Cancel Action...\n");
           // invoiceSync.log.writeToFile("Cancel Action...\n");
            MainFrame.progressBarLabels.setText("");
            syncProgressBar.setValue(0);
        }  
        
    }


}
